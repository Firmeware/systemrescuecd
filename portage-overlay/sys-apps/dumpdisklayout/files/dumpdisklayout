#!/usr/bin/python
# dumpdisklayout: system backup including disk layout and contents
# backup/restore disk layout (msdos-disklabel + lvm-layout) to a text file
# Copyright 2007 Francois Dupoux
# Distributed under the terms of the GNU General Public License v2
import sys,os
sys.path.append(os.path.abspath(os.curdir))
sys.path.append('/usr/lib/dumpdisklayout/modules/')

LOGFILE='/var/log/dumpdisklayout.log'

import re,commands,sys,datetime
import mod_checks
import mod_filesys
import backup, restore

# -------------------------- utilities functions --------------------------
# write a message in the logfile
def log_message(line):
	flog=open(LOGFILE,'a+')
	flog.write(line)
	flog.close()

# -------------------------- main: checks ----------------------------
def main_checks():
	REQPROGS=('sfdisk', 'uname', 'pvdisplay', 'vgdisplay', 'lvdisplay', 'pvcreate', 'vgcreate', 'lvcreate', 'lvm', 'dumpe2fs')
	REQFILES=('/proc/partitions', '/sys/block')
	
	(status, msg)=mod_checks.check_linux26()
	if status != 0:
		print msg
		sys.exit(1)
	
	(status, msg)=mod_checks.check_requirements(REQPROGS, REQFILES)
	if status != 0:
		print msg
		sys.exit(1)
	
	(status, msg)=mod_checks.check_lvmprogs()
	if status != 0:
		print msg
		sys.exit(1)

# -------------------------- main: arguments -------------------------
def main_usage():
	print "usage: %s <command> <datafile>" % sys.argv[0]
	print "   commands: 'backup' || 'restore'"
	print "   datafile: backup file or '-' for stdin/stdout"
	sys.exit(1)

def parse_argv():
	argc=len(sys.argv)
	if len(sys.argv) != 3: main_usage()
	command=sys.argv[1]
	datpath=sys.argv[2]
	
	# process 'command'
	if not command in  ('backup', 'restore'):
		print "%s is not a valid command. expected either 'backup' or 'restore'"%command
		sys.exit(1)
		
	# process 'datafile'
	if datpath=='-':
		if command=='backup': datfile=sys.stdout
		else: datfile=sys.stdin
	else:
		if command=='backup': datmode='wb'
		else: datmode='rb'
		try:
			datfile=open(datpath, datmode)
		except:
			print 'cannot open %s'%datpath
			sys.exit(1)
	return (command, datfile)

def main_backup(datfile):
	actions=((backup.dump_sysinfo, 'SI', 'System Information'), 
		(backup.dump_disks, 'HD', 'Physical Hard-disks'), 
		(backup.dump_sfdisk, 'SF', 'Partitions layout made by sfdisk'), 
		(backup.dump_pv, 'PV', 'LVM Physical Volumes'), 
		(backup.dump_vg, 'VG', 'LVM Volume Groups'), 
		(backup.dump_lv, 'LV', 'LVM Logical Volumes'), 
		(backup.dump_fs, 'FS', 'File Systems'))
	
	# check that lvm is started
	if mod_checks.check_lvm_status('available')!=0:
		print 'please start the lvm initscript first'
		sys.exit(1)
	
	for work in actions:
		(fct, prefix, desc)=work
		datfile.write('# %s\n' % desc);
		for line in fct():
			datfile.write(prefix+'!'+line+'\n');
		datfile.write('\n');

def main_restore(datfile):
	actions=((restore.check_filefmt, 'SI'), 
		(restore.check_physhdd, 'HD'), 
		(restore.rest_sfdisk, 'SF'), 
		(restore.rest_pv, 'PV'), 
		(restore.rest_vg, 'VG'), 
		(restore.rest_lv, 'LV'), 
		(restore.rest_fs, 'FS'))
	hddlist=[]
	volgroup={}
	
	# check that lvm is stopped
	if mod_checks.check_lvm_status('not available')!=0:
		print 'please stop the lvm initscript first'
		sys.exit(1)
	
	contents=datfile.readlines()
	for (fct, prefix) in actions:
		#(fct, prefix)=work
		inlines=[]
		for line in contents:
			if (re.match('^%s'%prefix, line)):
				inlines.append(line.strip("\r\n")[len(prefix+'!'):])
		res=fct(inlines)
		if res!=0:
			print 'ERROR: function %s returned %s' % (fct, res)
			sys.exit(1)
		else:
			print 'function %s succeeded'%fct
		print '\n--------------------------------------------------------\n'

# -------------------------- backup ------------------------------
main_checks()
(command, datfile)=parse_argv()

if command=='backup':
	main_backup(datfile)
	datfile.close()
elif command=='restore':
	main_restore(datfile)
	datfile.close()
else:
	main_usage()

sys.exit(0)
