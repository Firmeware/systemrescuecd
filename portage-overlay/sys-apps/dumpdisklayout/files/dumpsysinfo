#!/usr/bin/python
# DumpSysInfo: dump system information (hardware, disk, network, ...) to a text file
# Copyright 2007 Francois Dupoux
# Distributed under the terms of the GNU General Public License v2
import sys,os
sys.path.append(os.path.abspath(os.curdir))
sys.path.append('/usr/lib/dumpdisklayout/modules/')
import commands, re
import mod_filesys
import mod_checks
import mod_diskutil

VERSION='0.1.1'

# -------------------------- functions ----------------------------
def main_checks():
	REQPROGS=('lspci', 'lsusb', 'ip', 'lsmod', 'grep')
	REQFILES=('/proc/partitions', '/proc/cmdline')
	
	(status, msg)=mod_checks.check_linux26()
	if status != 0:
		print msg
		sys.exit(1)
	
	(status, msg)=mod_checks.check_requirements(REQPROGS, REQFILES)
	if status != 0:
		print msg
		sys.exit(1)
	
	(status, msg)=mod_checks.check_lvmprogs()
	if status != 0:
		print msg
		sys.exit(1)

def printtitle(title, padding):
	totallen=80	
	startpos=int(totallen/2)-int(len(title)/2)
	remain=totallen-startpos-len(title)
	text=(padding*startpos)+title+(padding*remain)
	print text
	
def formattable(items):
	res=''
	for cur in items:
		res += cur
		res += ' ' * (15-len(cur))
	return res
	
def do_lspci():
	reslines=[]
	status, output = commands.getstatusoutput("lspci -nn")
	if status != 0:
		reslines.append('no device found')
	else:
		reslines.append('%d devices found:\n%s' % (len(output.splitlines()), output))
	return reslines

def do_lsusb():
	reslines=[]
	status, output = commands.getstatusoutput("lsusb")
	if status != 0:
		reslines.append('no device found')
	else:
		reslines.append('%d devices found:\n%s' % (len(output.splitlines()), output))
	return reslines

def do_ethernet():
	reslines=[]
	status, output = commands.getstatusoutput("ip link show")
	if status != 0: 
		reslines.append('no device found')
	else:
		devnum=0
		for curl in output.splitlines():
			if not re.match(r"^[0-9]*: eth[0-9]*", curl): continue
			devnum=devnum+1
			devname=curl.split(':')[1].strip()
			if not re.match(r"^eth[0-9]{1,3}$", devname): continue
			drivername=commands.getstatusoutput("ethtool -i %s | grep ^driver | cut -d' ' -f2" % devname)[1]
			driververs=commands.getstatusoutput("ethtool -i %s | grep ^version | cut -d' ' -f2" % devname)[1]
			addrlist=[]
			for laddr in commands.getstatusoutput("ip addr show %s" % devname)[1].splitlines():
				laddr=laddr.strip()
				if not re.match(r"^inet [0-9\.]*", laddr): continue
				addrlist.append(laddr.strip().split(" ")[1])
			reslines.append("device-%02d: devname=%s, driver=%s (%s), ip=%s" % 
				(devnum, devname, drivername, driververs, addrlist))
	return reslines

def do_modules():
	reslines=[]
	status, output = commands.getstatusoutput("lsmod | grep -i -v ^Module")
	if status != 0:
		reslines.append('no module found')
	else:
		reslines.append('%d modules loaded into memory:\n%s' % (len(output.splitlines()), output))
	return reslines

def do_general():
	reslines=[]
	struname=''
	status, output = commands.getstatusoutput("uname -a")
	if status == 0: struname=output
	strcmdline=''
	status, output = commands.getstatusoutput("cat /proc/cmdline")
	if status == 0: strcmdline=output
	reslines.append('System information: %s' % (struname))
	reslines.append('Command line: %s' % (strcmdline))
	return reslines

def do_partitions():
	reslines=[]
	for dev in mod_diskutil.list_partitions():
		part='/dev/'+dev
		size=mod_diskutil.get_part_size(dev)
		sizetxt=mod_diskutil.format_size(size)
		fs=mod_filesys.probe_filesystem(part)
		if fs=='ext2/ext3':
			(fs,details,label)=mod_filesys.get_details_ext2(part)
			details=details.split('!')[0]
			reslines.append(formattable((part,fs,details,sizetxt)))
		elif fs=='reiser3':
			(fs,details,label)=mod_filesys.get_details_reiser3(part)
			details=details.split('!')[0]
			reslines.append(formattable((part,fs,details,sizetxt)))
		elif fs=='ntfs':
			(fs,details,label)=mod_filesys.get_details_ntfs(part)
			details=details.split('!')[0]
			reslines.append(formattable((part,fs,details,sizetxt)))
		elif fs=='lvm2':
			reslines.append(formattable((part,'lvm2','<none>',sizetxt)))
		elif fs=='swap':
			(fs,details,label)=mod_filesys.get_details_swap(part)
			details=details.split('!')[0]
			reslines.append(formattable((part,fs,details,sizetxt)))
		else:
			reslines.append(formattable((part,'unknown','<none>',sizetxt)))
	return reslines

def do_proc_partitions():
	reslines=[]
	for line in file('/proc/partitions').readlines():
		reslines.append(line.strip("\r\n").strip())
	return reslines

# ------------------- main --------------------
printtitle("dumpsysinfo v%s" % VERSION, '=')

print ''
main_checks()

fcts=(	(do_general, 		'general'),
	(do_lspci,		'pci devices'),
	(do_lsusb,		'usb devices'),
	(do_ethernet,		'ethernet devices'),
	(do_modules,		'kernel modules'),
	(do_proc_partitions,	'/proc/partitions'),
	(do_partitions,		'partitions') )

for (curfct, title) in fcts:
	printtitle(title, '-')
	for line in curfct():
		print line
	print " "
